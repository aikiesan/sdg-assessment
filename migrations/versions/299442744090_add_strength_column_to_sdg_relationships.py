"""Add strength column to sdg_relationships

Revision ID: 299442744090
Revises: 6c2465c2bdeb
Create Date: 2025-04-26 06:58:58.889822

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '299442744090'
down_revision = '6c2465c2bdeb'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - ADJUSTED FOR SQLITE ###

    # --- Step 1: Assume column might already exist, COMMENT OUT ADD ---
    # with op.batch_alter_table('sdg_relationships', schema=None) as batch_op:
    #    batch_op.add_column(sa.Column('strength', sa.Float(), nullable=True))
    print("Skipping ADD COLUMN step, assuming 'strength' might exist.")

    # Step 2: Update existing rows to set a default value for the new column
    # This will only work if the column actually exists.
    print("Attempting to UPDATE existing rows...")
    try:
        op.execute('UPDATE sdg_relationships SET strength = 0.0 WHERE strength IS NULL')
        print("UPDATE statement executed.")
    except Exception as e:
        # If the UPDATE fails (e.g., column doesn't exist after all), log it but continue.
        # This might happen if the manual DROP COLUMN actually worked this time.
        print(f"WARNING: Could not execute UPDATE statement. Column 'strength' might not exist yet. Error: {e}")

    # Step 3: (REMOVED) No explicit alter back to NOT NULL

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('sdg_relationships', schema=None) as batch_op:
        batch_op.add_column(sa.Column('relationship_strength', sa.REAL(), server_default=sa.text('(0.0)'), nullable=True))
        batch_op.drop_column('strength')

    # ### end Alembic commands ###
